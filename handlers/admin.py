
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car
from keyboards import get_admin_inline_keyboard
from config import ADMIN_ID

async def admin_panel(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_inline_keyboard()
        )
    else:
        await update.message.reply_text(
            "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_inline_keyboard()
        )

async def manage_drivers(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="add_driver")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data="list_drivers")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    await update.callback_query.edit_message_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def manage_cars(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="add_car")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω", callback_data="list_cars")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    await update.callback_query.edit_message_text(
        "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def add_driver(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

async def add_car(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

async def list_drivers(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    db = SessionLocal()
    drivers = db.query(User).filter(User.role == "driver").all()
    db.close()
    
    if not drivers:
        text = "üìã –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n"
        for driver in drivers:
            text += f"üë§ {driver.name}\nüìû {driver.phone}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_drivers")]]
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def list_cars(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    db = SessionLocal()
    cars = db.query(Car).all()
    db.close()
    
    if not cars:
        text = "üìã –ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω:\n\n"
        for car in cars:
            text += f"üöó {car.brand} {car.model}\nüî¢ {car.number}\n‚õΩ {car.fuel}\nüìè {car.current_mileage} –∫–º\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_cars")]]
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_stats(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    await update.callback_query.answer()
    
    db = SessionLocal()
    users_count = db.query(User).count()
    cars_count = db.query(Car).count()
    drivers_count = db.query(User).filter(User.role == "driver").count()
    db.close()
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
    text += f"üöó –í—Å–µ–≥–æ –º–∞—à–∏–Ω: {cars_count}\n"
    text += f"üöõ –í–æ–¥–∏—Ç–µ–ª–µ–π: {drivers_count}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_admin_text(update, context):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Ö
    pass–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Ö
    pass—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    db = SessionLocal()
    drivers_count = db.query(User).filter(User.role == "driver").count()
    cars_count = db.query(Car).count()
    db.close()
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –í–æ–¥–∏—Ç–µ–ª–µ–π: {drivers_count}\nüöó –ú–∞—à–∏–Ω: {cars_count}"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_admin_text(update, context):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
