
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car
from config import ADMIN_ID

async def handle_admin_text(update: Update, context):
    if update.effective_user.id != ADMIN_ID:
        return
    
    admin_action = context.user_data.get("admin_action")
    
    if admin_action == "adding_driver":
        await handle_driver_adding(update, context)
    elif admin_action == "adding_car":
        await handle_car_adding(update, context)

async def handle_driver_adding(update: Update, context):
    driver_data = context.user_data.get("driver_data", {})
    text = update.message.text
    
    if "name" not in driver_data:
        driver_data["name"] = text
        context.user_data["driver_data"] = driver_data
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:")
    
    elif "phone" not in driver_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ –∑–∞–Ω—è—Ç
        db = SessionLocal()
        existing_user = db.query(User).filter(User.phone == text).first()
        if existing_user:
            db.close()
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:")
            return
        
        driver_data["phone"] = text
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        new_driver = User(
            phone=driver_data["phone"],
            name=driver_data["name"],
            role="driver"
        )
        db.add(new_driver)
        db.commit()
        db.close()
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_drivers")]]
        
        await update.message.reply_text(
            f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ –ò–º—è: {driver_data['name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("admin_action", None)
        context.user_data.pop("driver_data", None)

async def handle_car_adding(update: Update, context):
    car_data = context.user_data.get("car_data", {})
    text = update.message.text
    
    if "number" not in car_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ –∑–∞–Ω—è—Ç
        db = SessionLocal()
        existing_car = db.query(Car).filter(Car.number == text).first()
        if existing_car:
            db.close()
            await update.message.reply_text("‚ùå –ú–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:")
            return
        
        car_data["number"] = text
        context.user_data["car_data"] = car_data
        await update.message.reply_text("üè≠ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:")
    
    elif "brand" not in car_data:
        car_data["brand"] = text
        context.user_data["car_data"] = car_data
        await update.message.reply_text("üöó –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã:")
    
    elif "model" not in car_data:
        car_data["model"] = text
        context.user_data["car_data"] = car_data
        await update.message.reply_text("‚õΩ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:")
    
    elif "fuel" not in car_data:
        car_data["fuel"] = text
        context.user_data["car_data"] = car_data
        await update.message.reply_text("üìè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥:")
    
    elif "current_mileage" not in car_data:
        try:
            mileage = int(text)
            car_data["current_mileage"] = mileage
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—à–∏–Ω—É
            db = SessionLocal()
            new_car = Car(
                number=car_data["number"],
                brand=car_data["brand"],
                model=car_data["model"],
                fuel=car_data["fuel"],
                current_mileage=car_data["current_mileage"]
            )
            db.add(new_car)
            db.commit()
            db.close()
            
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_cars")]]
            
            await update.message.reply_text(
                f"‚úÖ –ú–∞—à–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üöó –ù–æ–º–µ—Ä: {car_data['number']}\n"
                f"üè≠ –ú–∞—Ä–∫–∞: {car_data['brand']}\n"
                f"üöô –ú–æ–¥–µ–ª—å: {car_data['model']}\n"
                f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car_data['fuel']}\n"
                f"üìè –ü—Ä–æ–±–µ–≥: {car_data['current_mileage']} –∫–º",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop("admin_action", None)
            context.user_data.pop("car_data", None)
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–±–µ–≥–∞:")
